#+TITLE:Computer room in slackware : Server config howto 
#+AUTHOR: William Oquendo
#+email: woquendo@gmail.com
#+INFOJS_OPT: 
#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes 
-----

This document presents a basic procedure to configure a computer room
in slackware. This generates a script, called
=config_slackware_server.sh= and a bunch of config files. At the end
you just run the mentioned script and hopefully everything will work
as expected. 

* Description
  - The system to be installed is slackware 14.2 64bits, although some script
    might help to keep it updated
  - Services to be configured:
    - DHCP + DNS + MASQUERADING : Using dnsmasq
    - NAT : Through arno iptables firewall
    - NIS : For now ...
    - NFS
    - Optional : Backup
  - Server is assumed to have two nics, one external (=eth0=), one
    internal (=eth1=)
  - The internal network of class C will use the segment 192.168.10.0/24

* Slackware installation
  Just download it from the official slackware web page. Get the dvd
  version. Install everything. It is advisable to have at least four
  partitions: one for root, one for swap, one for home, and one for tmp.

* Common utility functions
  #+NAME: util_functions
  #+BEGIN_SRC bash :exports code 
function usage() 
{
    echo "USAGE: "
    echo "config_server.sh DIR LINUX_FLAVOR[=SLACKWARE]"
    echo "DIR          : Where to find the model config files"
    echo "LINUX_FLAVOR : UBUNTU or SLACKWARE , in capital"
    echo "NOTE: Ubuntu not working currently"
}

# global functions
function backup_file() 
{
    if [ -e "$1" ]; then
	cp -v "$1" "$1".orig-$(date +%F--%H-%M-%S)
    fi
}

function copy_config()
{
    mfile="$1"
    bfile="$2"
    backup_file "$bfile"
    cp -vf "$mfile" "$bfile"
}

function start_msg()
{
  echo "####################################### "
  echo "# START: $1"
}

function end_msg()
{
  echo "# DONE: $1"
  echo "#######################################\n "
}

  #+END_SRC

* Configuring root internet behind proxy unal
  #+NAME: proxy_config
  #+BEGIN_SRC bash :exports code 
# Configure root internet access
MSG="Configuring proxy for root"
start_msg $MSG
bname="/root/.bashrc"
touch $bname
if [ x"" == "$(grep https_proxy ${bname} 2>/dev/null)" ]; then
    echo 'export PROXY="fisicasop_fcbog:s4l4fis219@proxyapp.unal.edu.co:8080/" ' >> $bname
    echo 'export http_proxy="http://$PROXY" ' >> $bname
    echo 'export https_proxy="https://$PROXY" ' >> $bname
    echo 'export ftp_proxy="ftp://$PROXY" ' >> $bname
    echo 'export RSYNC_PROXY="$PROXY" ' >> $bname
else
    echo "Root proxy already configured."
fi
source /root/.bashrc
end_msg $MSG

  #+END_SRC
* [Deprecated] Installing sbopkg                                   :noexport:
  #+NAME: sbopkg_config
  #+BEGIN_SRC bash :exports code 
MSG="Installing sbopkg"
if [ "$LINUX" == "SLACKWARE" ]; then
    echo $MSG
    installpkg "$FDIR/sbopkg-0.38.1-noarch-1_wsr.tgz"
    echo "DONE: $MSG"
fi
  #+END_SRC

* TODO Install slpkg : blacklist?
  #+NAME: slpkg_config
  #+BEGIN_SRC bash :exports code 
MSG="Installing slpkg"
start_msg $MSG
if [ x"" != "$(hash slpkg)" ]; then
    cd Downloads
    wget https://gitlab.com/dslackw/slpkg/-/archive/3.4.3/slpkg-3.4.3.tar.gz
    tar xf slpkg-3.4.3.tar.gz
    cd slpkg-3.4.3
    ./install.sh
    source .bashrc
    slpkg upgrade
else
    echo "Already installed"
    end_msg $MSG
  #+END_SRC
  
* Fix dhcpcd client (advertise mac address instead of ipv6 stuff)
  
  #+NAME: dhcpcd_config
  #+BEGIN_SRC bash :exports code
MSG="Configuring dhcpcd to send the mac to the dhcp server"
start_msg $MSG
copy_config "$FDIR/SERVER-SLACKWARE-etc-dhcpcd.conf" "/etc/dhcpcd.conf"
echo "DONE: $MSG"
  #+END_SRC

* Fix xinitrc
  #+NAME: xinitrc_config
  #+BEGIN_SRC bash :exports code
MSG "Fixing xinitrc on /etc/skel"
start_msg $MSG
if [ ! -f /etc/skel/.xinitrc ]; then 
    cp -f /etc/xdg/xfce4/xinitrc /etc/skel/.xinitrce
else
    echo "Already fixed"
fi
end_msg $MSG

  #+END_SRC
* Configure Network interfaces
  #+name: nic_config
  #+BEGIN_SRC bash :exports code 
# network interfaces
MSG="Configuring network interfaces with fixed ip"
start_msg $MSG
if [ "$LINUX" == "SLACKWARE" ]; then
    if [ x"" == x"$(grep 127.0.0.1 /etc/resolv.conf.head )" ]; then
      echo "Setting up resolv.conf.head "
      TFILE="/etc/resolv.conf.head"
      copy_config "$FDIR/SERVER-etc-resolv.conf.head" "$TFILE"
    fi	
    if [ x"" == x"$(grep 192.168.10.1 /etc/rc.d/rc.inet1.conf 2> /dev/null)" ]; then 
      bash /etc/rc.d/rc.networkmanager stop
      chmod -x /etc/rc.d/rc.networkmanager
      copy_config "$FDIR/SERVER-SLACKWARE-etc-rc.d-rc.inet1.conf" /etc/rc.d/rc.inet1.conf
  else
      echo "Already configured, just restarting services ..."
  fi
      /etc/rc.d/rc.inet1 restart
  
elif [ "$LINUX" == "UBUNTU" ]; then
    copy_config "$FDIR/SERVER-UBUNTU-etc-network-interfaces" /etc/network/interfaces
    copy_config "$FDIR/SERVER-UBUNTU-etc-NetworkManager-NetworkManager.conf" /etc/NetworkManager/NetworkManager.conf
    /etc/init.d/networking restart
fi
end_msg "DONE: $MSG"
  #+END_SRC

* dnsmasq : dhcp, dns, masquerading
  #+name: dnsmasq_config
  #+BEGIN_SRC bash :exports code 
# dnsmasq
MSG="Configuring dnsmasq "
start_msg $MGS
if [ "$LINUX" == "SLACKWARE" ]; then
    TFILE="/etc/dnsmasq.conf"
    if [! -f $TFILE ]; then  
	copy_config "$FDIR/SERVER-etc-dnsmasq.conf" "$TFILE"
	TFILE="/etc/dnsmasq-hosts.conf"
	copy_config "$FDIR/SERVER-etc-dnsmasq-hosts.conf" "$TFILE"
	chmod +x /etc/rc.d/rc.dnsmasq 
	TFILE="/etc/hosts"
	copy_config "$FDIR/SERVER-etc-hosts" "$TFILE"
    else
	echo "Already configured. Restarting services ..."
    fi
    /etc/rc.d/rc.dnsmasq restart
elif [ "$LINUX" == "UBUNTU" ]; then
    apt-get -y install dnsmasq 
    copy_config "$FDIR/SERVER-etc-dnsmasq.conf" "/etc/dnsmasq.conf"
    #bfile="/etc/defaults/dnsmasq"
    #backup_file $bfile
    #echo "IGNORE_RESOLVCONF=yes" >> $bfile 
    /etc/init.d/networking stop
    service dnsmasq restart
    /etc/init.d/networking start
fi
end_msg "DONE: $MSG"

  #+END_SRC

* firewall (NAT) : Arno iptables firewall.
  I will use arno iptables firewall because it has worked pretty well
  before . It must be installed before this step. If not installed , I
  will try to use sbopkg to install it.

  #+NAME: firewall_config
  #+BEGIN_SRC bash :exports code
# firewall
MSG="Configuring firewall "
start_msg $MSG
if [ "$LINUX" == "SLACKWARE" ]; then
    if [ ! hash arno-iptables-firewall 2>/dev/null ]; then
	#sbopkg -e stop -B -k -i arno-iptables-firewall
	source /root/.bashrc
	slpkg uograde
	slpkg -s sbo arno-iptables-firewall-2.0.1e-noarch-3_SBo
	ln -svf /etc/rc.d/rc.arno-iptables-firewall /etc/rc.d/rc.firewall
	copy_config "$FDIR/SERVER-firewall.conf" "/etc/arno-iptables-firewall/firewall.conf"
	chmod o-rwx /etc/arno-iptables-firewall/firewall.conf
	chmod +x /etc/rc.d/rc.firewall
    else
	echo "    -> firewall already installed and configured."
    fi
    /etc/rc.d/rc.firewall restart
elif [ "$LINUX" == "UBUNTU" ]; then
    apt-get -y install arno-iptables-firewall
    copy_config "$FDIR/SERVER-firewall.conf" "/etc/arno-iptables-firewall/firewall.conf"
    service arno-iptables-firewall restart
fi
end_msg $MSG
# read
  #+END_SRC
* kanif cluster tools                                              :noexport:
  #+NAME: kanif_config
  #+BEGIN_SRC bash :exports code 
# kanif cluster tools
echo "Configuring kanif "
#ssh-keygen -t rsa
#for a in ssf6 ssf7 ssf8 ssf9; do
#    yes 'PASSWORD' | ssh-copy-id -i ~/.ssh/id_rsa.pub $q
#done
if [ "$LINUX" == "SLACKWARE" ]; then
    echo "Kanif assumed to be installed in slackware."
elif [ "$LINUX" == "UBUNTU" ]; then
    apt-get -y install kanif
fi
copy_config "$FDIR/SERVER-etc-c3.conf" "/etc/kanif.conf"
#kash ls
echo "DONE: Configuring kanif "
# read

  #+END_SRC
* NFS
  #+NAME: nfs_config
  #+BEGIN_SRC bash :exports code 
# nfs
MSG="Configuring nfs "
start_msg $MSG
if [ "$LINUX" == "SLACKWARE" ]; then
    if [x"" == x"$(grep 192.168 /etc/hosts.allow 2>/dev/null)" ]; then
	copy_config "$FDIR/SERVER-etc-hosts.allow" "/etc/hosts.allow"
    else
        echo "hosts allow already configured"
    fi
    if [x"" == x"$(grep 192.168.10.1 /etc/exports 2>/dev/null)" ]; then
	copy_config "$FDIR/SERVER-etc-exports" "/etc/exports"
    else
	echo "Exports already configured. Restarting services ..."
    fi
    chmod +x /etc/rc.d/rc.nfsd 
    /etc/rc.d/rc.nfsd restart
    /etc/rc.d/rc.inet2 restart
elif [ "$LINUX" == "UBUNTU" ]; then
    apt-get -y install nfs-kernel-server
    service nfs-kernel-server restart
fi
echo "NOTE: If you have NFS problems, consider editing the /etc/hosts.allow and /etc/hosts.deny files"
end_msg $MSG
#kash 'mount -a'
#kash 'mount'
# read
  #+END_SRC
* NIS

  #+NAME: nis_config
  #+BEGIN_SRC bash :exports code
# nis
MSG="Configuring nis "
start_msg $MSG
if [ x"" == x"$(grep salafisnis /etc/defaultdomain) 2>/dev/null " ] ; then 
    copy_config "$FDIR/SERVER-etc-defaultdomain" "/etc/defaultdomain"
else
    echo "Already configured default nis domain"
fi
# if [ "$LINUX" == "SLACKWARE" ]; then
#     echo "$LINUX : Nothing to be done. "
# elif [ "$LINUX" == "UBUNTU" ]; then
#     #bfile="/etc/default/nis"
#     #backup_file $bfile
#     #sed -i.bck 's/NISSERVER=.*/NISSERVER=master/; s/NISCLIENT=.*/NISCLIENT=/' $bfile
#     copy_config "$FDIR/SERVER-UBUNTU-etc-default-nis" "/etc/default/nis"
# fi

#bfile="/etc/yp.conf"
#backup_file $bfile
#echo 'ypserver 192.168.123.1 ' > $bfile
if [ x"" == x"$(grep salafisnis /etc/yp.conf) 2>/dev/null " ] ; then 
    copy_config "$FDIR/SERVER-etc-yp.conf" "/etc/yp.conf"
    copy_config "$FDIR/SERVER-var-yp-Makefile" "/var/yp/Makefile"
else
    echo "Already configured yp"
fi

#if [ "$LINUX" == "SLACKWARE" ]; then
chmod +x /etc/rc.d/rc.yp
backup_file /etc/rc.d/rc.yp
if [ x"" == x"$(grep 'YP_SERVER_ENABLE=1' /etc/rc.d/rc.yp 2>/dev/null)"]; then 
    sed -i.bck 's/YP_CLIENT_ENABLE=.*/YP_CLIENT_ENABLE=0/ ; s/YP_SERVER_ENABLE=.*/YP_SERVER_ENABLE=1/ ;' /etc/rc.d/rc.yp
else
    echo "Already configured as yp server"
fi

echo "Running nis services ..."
ypserv
make -BC /var/yp
#/usr/lib64/yp/ypinit -m
/etc/rc.d/rc.yp restart
/etc/rc.d/rc.inet2 restart

# elif [ "$LINUX" == "UBUNTU" ]; then
#     service portmap restart
#     service ypserv restart
#     service ypbind restart
#     #kash service ypserv restart
#fi
rpcinfo -p localhost # check
end_msg $MSG
# read

  #+END_SRC
* Crontab
  This crontab reads a given script and runs it every some time
  #+name:crontab_config
  #+begin_src sh :exports code 
MSG="Configuring crontab "
start_msg "$MSG"
if [ x"" = x"$(crontab -l | grep network.sh 2>/dev/null)" ] ; then 
    crontab files/SERVER-crontab -u root
else
    echo "Already configured"
fi
end_msg "$MSG"

  #+end_src
* Write final script
  #+BEGIN_SRC bash :exports code :noweb yes :tangle config_slackware_server.sh 
<<util_functions>>

# check args
if [ "$#" -ne "2" ]; then usage; exit 1 ; fi
if [ ! -d "$1" ]; then echo "Dir does not exist : $1"; usage; exit 1 ; fi
#if [[ "$2" -ne "UBUNTU" -o "$2" -ne "SLACKWARE" ]]; then usage; exit 1 ; fi

# global vars
BDIR=$PWD
FDIR=$1
LINUX="SLACKWARE"


<<proxy_config>>
<<slpkg_config>>
<<dhcpcd_config>>
<<nic_config>>
<<xinitrc_config>>
<<dnsmasq_config>>
<<firewall_config>>
<<nfs_config>>
<<nis_config>>
<<crontab_config>>
  #+END_SRC

* TODO pssh?
  - https://unix.stackexchange.com/questions/128974/parallel-ssh-with-passphrase-protected-ssh-key
  - https://www.funtoo.org/Keychain
  - https://stackoverflow.com/questions/43597283/pass-the-password-as-an-argument-in-pssh
  - https://www.golinuxcloud.com/pssh-public-key-authentication-passwordless/

* Auxiliary scripts
** Create users from csv list with usernames and ids
   This script reads a list of usernames and passwords and creates the
   corresponding users
   #+begin_src sh :exports code :tangle create_users_from_list.sh
#!/bin/bash

FNAME=${1}
if [[ ! -f $FNAME ]]; then
    echo "Error: filename $FNAME does not exists"
    exit 1
fi

while read line
do
    username=$(echo $line | awk '{print $1}')
    password=$(echo $line | awk '{print $2}')
    echo username=$username
    echo password=$password
    # echo "Deleting account $username"
    # userdel $username
    echo Creating account $username
    useradd -d /home/$username -G audio,cdrom,floppy,plugdev,video -m -s /bin/bash $username 
    echo "Changing password for $username to ${password}"
    echo ${username}:${password} | chpasswd
    #echo "Recursive chown ... &"
    #chown -R $username.$username /home/$username &
done < $FNAME

read

echo "Updating nis database"
make -C /var/yp/
service portmap restart
service ypserv  restart
echo "DONE."

   #+end_src
** Recreate users from folders inside home 
   This is useful when the server was reinstalled
   #+begin_src sh :exports code :tangle recreate_users_from_directories.sh
#!/bin/bash

for usernamedir in /home/*; do 
    if [ -d $usernamedir ]; then
	username=$(basename $usernamedir)
	if [ "ftp" != "$username" ] && [ "localuser" != "$username" ] ; then 
	    #echo "Deleting account $username"
	    #userdel $username
	    echo Creating account $username
	    useradd -d /home/$username -G audio,cdrom,floppy,plugdev,video -m -s /bin/bash $username
	    echo "Changing password for $username to ${username}123"
	    echo ${username}:${username}123 | chpasswd 
	    echo "Recursive chown ... &"
	    chown -R $username.$username /home/$username & 
	fi
    fi
done
echo "Updating nis database"
make -C /var/yp/
service portmap restart
service ypserv  restart

echo "DONE."

   #+end_src
** Data dir for users
   In case there are some hard disk space to share between users,
   create directories for each one
   #+begin_src sh  :exports code :tangle create_data_dirs_for_users.sh
#!/bin/bash

for a in /home/*; do
    bname=$(basename $a)
    id -u $bname &> /dev/null
    status=$?
    #echo $bname
    #echo $status
    if [[ "0" -eq "$status" ]]; then
	for b in data01 data02; do
	    mkdir -p /mnt/local/$b/$bname	    
	    chown -R $bname.$bname /mnt/local/$b/$bname
	done
    fi
done
   #+end_src

* PACKAGES
  This section is used to configure packages to be installed after
  successful configuration. Each package will be its own script,
  hopefully idempotent.
** Ganglia
   [[http://ganglia.info/][Ganglia]] is a system used to monitor clusters. I will start using it
   to check the status of the computer room. The isnstallation is
   different for server and client. I will put both here. 
*** Server installation and configuration
    I need to install =rrdtool=, =ganglia= with gmetad activated, and
    =ganglia-web=. I will use slackbuilds although I cannot use sbopkg
    or similar since it does not work with the proxy.
    #+BEGIN_SRC bash :exports code :tangle all-install-ganglia-full.sh
# This scripts install ganglia and its requirements (rrdtool) on a server.
source ~/.bashrc
mkdir /tmp/ganglia
cd /tmp/ganglia

# Install rrdtool
if ! hash rrdtool &>/dev/null; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing rrdtool ..."
    wget -nc -c  http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.7.0.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/libraries/rrdtool.tar.gz &&
	tar xf rrdtool.tar.gz &&
	cd rrdtool &&
	cp ../rrdtool-1.7.0.tar.gz ./ &&
	bash rrdtool.SlackBuild &&
	installpkg /tmp/rrdtool-1.7.0-x86_64-1_SBo.tgz &&
	echo "Done rrdtool. "
fi

# Install confuse
if [ ! -f /usr/lib64/libconfuse.la ]; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing confuse ..."
    wget -nc -c  https://github.com/martinh/libconfuse/releases/download/v3.2/confuse-3.2.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/libraries/confuse.tar.gz &&
	tar xf confuse.tar.gz &&
	cd confuse &&
	cp ../confuse-3.2.tar.gz ./ &&
	bash confuse.SlackBuild &&
	installpkg /tmp/confuse-3.2-x86_64-1_SBo.tgz &&
	echo "Done lib confuse. "
fi

# install ganglia activating gmetad
if ! hash ganglia-config &>/dev/null; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing ganglia/gmetad ..."
    wget -nc -c  http://downloads.sourceforge.net/ganglia/ganglia-3.7.2.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/network/ganglia.tar.gz &&
	tar xf ganglia.tar.gz &&
	cd ganglia &&
	cp ../ganglia-3.7.2.tar.gz ./ &&
	OPT=gmetad ./ganglia.SlackBuild &&
	installpkg /tmp/ganglia-3.7.2-x86_64-1_SBo.tgz &&
	echo "Done ganglia/gmetad. "
fi

# install ganglia-web
if [ ! -d /var/www/htdocs/ganglia/ ]; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing ganglia-web ..."
    wget -nc -c  http://downloads.sourceforge.net/ganglia/ganglia-web-3.7.2.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/network/ganglia-web.tar.gz &&
	tar xf ganglia-web.tar.gz &&
	cd ganglia-web &&
	cp ../ganglia-web-3.7.2.tar.gz ./ &&
	./ganglia-web.SlackBuild &&
	installpkg /tmp/ganglia-web-3.7.2-x86_64-1_SBo.tgz &&
	echo "Done ganglia-web. "
fi
    #+END_SRC

    And this is the configuration file
    #+BEGIN_SRC bash :exports code :tangle server-config-ganglia-gmetad.sh
# configure
if [ ! -f /etc/gmetad.conf ]; then
    echo "Configuring ganglia monitor gmetad..."
    cat <<EOF > /etc/gmetad.conf
# /etc/gmetad.conf on serversalafis
data_source "clustersalafis" serversalafis
EOF
    echo "Done."
fi
    #+END_SRC
*** Client 
    The client can use the same server install script, but the
    configuration changes as follows
    #+BEGIN_SRC bash :exports code :tangle client-config-ganglia-gmond.sh
if [ ! -f /etc/gmond.conf ]; then 
    echo "Configuring gmond.conf ..."
    cat <<EOF > /etc/gmond.conf
#/etc/gmond.conf - on clustersalafis
cluster {
  name = "clustersalafis"
  owner = "unspecified"
  latlong = "unspecified"
  url = "unspecified"
}
 
udp_send_channel {
  mcast_join = 192.168.10.1
  port = 8649
  ttl = 1
}
EOF
fi
echo "Done"
    #+END_SRC

