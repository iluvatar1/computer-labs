OBOB#+TITLE:Computer room in slackware : Server and client config
#+AUTHOR: William Oquendo
#+email: woquendo@gmail.com
#+INFOJS_OPT: 
#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes 
-----

This document presents a basic procedure to configure a computer room
in slackware. This generates a script, called
=bootsrap_slackware.sh= that uses a bunch of config files to setup
either a client or a server. At the end
you just run the mentioned script and hopefully everything will work
as expected. 

* Description
  - The system to be installed is slackware 14.2 64bits, although some script
    might help to keep it updated
  - Services to be configured:
    - DHCP + DNS + MASQUERADING : Using dnsmasq
    - NAT : Through arno iptables firewall
    - NIS : For now ...
    - NFS
    - Optional : Backup
  - Server is assumed to have two nics, one external (=eth0=), one
    internal (=eth1=)
  - The internal network of class C will use the segment 192.168.10.0/24

* Slackware installation
  Just download it from the official slackware web page. Get the dvd
  version. Install everything. It is advisable to have at least four
  partitions: one for root, one for swap, one for home, and one for tmp.

* Configuration
** Configuring root internet behind proxy unal
   #+NAME: proxy_config
   #+BEGIN_SRC bash :exports code 
# Configure root internet access
MSG="Configuring proxy for root"
start_msg $MSG
bname="/root/.bashrc"
touch $bname
if [ x"" == "$(grep https_proxy ${bname} 2>/dev/null)" ]; then
    echo 'export PROXY="${PROXYUSER}:${PROXYPASSWD}@proxyapp.unal.edu.co:8080/" ' >> $bname
    echo 'export http_proxy="http://$PROXY" ' >> $bname
    echo 'export https_proxy="https://$PROXY" ' >> $bname
    echo 'export ftp_proxy="ftp://$PROXY" ' >> $bname
    echo 'export RSYNC_PROXY="$PROXY" ' >> $bname
else
    echo "Root proxy already configured."
fi
source /root/.bashrc
end_msg $MSG

   #+END_SRC
** [Deprecated] Installing sbopkg                                  :noexport:
   #+NAME: sbopkg_config
   #+BEGIN_SRC bash :exports code 
MSG="Installing sbopkg"
if [ "$LINUX" == "SLACKWARE" ]; then
    echo $MSG
    installpkg "$FDIR/sbopkg-0.38.1-noarch-1_wsr.tgz"
    echo "DONE: $MSG"
fi
   #+END_SRC

** Install slpkg
   #+NAME: slpkg_config
   #+BEGIN_SRC bash :exports code 
MSG="Installing slpkg"
start_msg $MSG
if [ x"" != "$(hash slpkg)" ]; then
    cd Downloads
    source .bashrc
    wget https://gitlab.com/dslackw/slpkg/-/archive/3.4.3/slpkg-3.4.3.tar.gz
    tar xf slpkg-3.4.3.tar.gz
    cd slpkg-3.4.3
    ./install.sh
    backup_file /etc/slpkg/blacklist 
    cat <<EOF > /etc/slpkg/blacklist
 kernel-firmware
 kernel-generic
 kernel-generic-smp
 kernel-headers
 kernel-huge
 kernel-huge-smp
 kernel-modules
 kernel-modules-smp
 kernel-source

 mozilla-firefox
EOF
    slpkg upgrade
else
    echo "Already installed"
fi
end_msg $MSG
   #+END_SRC
  
** Fix dhcpcd client (advertise mac address instead of ipv6 stuff)
  
   #+NAME: dhcpcd_config
   #+BEGIN_SRC bash :exports code
MSG="Configuring dhcpcd to send the mac to the dhcp server"
start_msg $MSG
copy_config "$FDIR/SERVER-etc-dhcpcd.conf" "/etc/dhcpcd.conf"
echo "DONE: $MSG"
   #+END_SRC

** Fix xinitrc
   #+NAME: xinitrc_config
   #+BEGIN_SRC bash :exports code
MSG "Fixing xinitrc on /etc/skel"
start_msg $MSG
if [ ! -f /etc/skel/.xinitrc ]; then 
    cp -f /etc/xdg/xfce4/xinitrc /etc/skel/.xinitrce
else
    echo "Already fixed"
fi
end_msg $MSG
MSG "Fixing xsession on /etc/skel"
start_msg $MSG
if [ ! -f /etc/skel/.xsession ]; then 
    cp -f /etc/xdg/xfce4/xinitrc /etc/skel/.xinitrce
else
    echo "Already fixed"
fi
end_msg $MSG

   #+END_SRC
** Latam keyboard
   #+name:latam_keyboard
   #+begin_src sh
# latam keyboard
MSG="Configuring default X windows keyboard to be latam ..."
start_msg "$MSG"
bfile=/etc/X11/xorg.conf.d/90-keyboard-layout.conf
if [ x"" == x"$(grep la-latin1 $bfile 2>/dev/null)" ]; then 
    if [ -f $bfile ]; then
	backup_file $bfile
    fi
    cat<<EOF > $bfile
Section "InputClass"
        Identifier "keyboard-all"
        MatchIsKeyboard "on"
        MatchDevicePath "/dev/input/event*"
        Driver "evdev"
        Option "XkbLayout" "latam"
        #Option "XkbVariant" ""
        Option "XkbOptions" "terminate:ctrl_alt_bksp"
EndSection
EOF
else
    echo "    -> already configured"
fi
end_msg "$MSG"

   #+end_src
** Configure Network interfaces
   #+name: nic_config
   #+BEGIN_SRC bash :exports code 
# network interfaces
MSG="Configuring network interfaces "
start_msg "$MSG"
if [ "$TARGET"=="SERVER" ]; then
    if [ x"" == x"$(grep 127.0.0.1 /etc/resolv.conf.head )" ]; then
	echo "Setting up resolv.conf.head "
	TFILE="/etc/resolv.conf.head"
	copy_config "$FDIR/SERVER-etc-resolv.conf.head" "$TFILE"
    fi	
    if [ x"" == x"$(grep 192.168.10.1 /etc/rc.d/rc.inet1.conf 2> /dev/null)" ]; then 
	bash /etc/rc.d/rc.networkmanager stop
	chmod -x /etc/rc.d/rc.networkmanager
	copy_config "$FDIR/SERVER-etc-rc.d-rc.inet1.conf" /etc/rc.d/rc.inet1.conf
    else
	echo "Already configured, just restarting services ..."
    fi
    /etc/rc.d/rc.inet1 restart
else
    echo "Creating Network Manager hook"
    if [ ! -f "/etc/NetworkManager/dispatcher.d/90networkmanagerhook.sh" ]; then
	cp $FDIR/CLIENT-90networkmanagerhook.sh /etc/NetworkManager/dispatcher.d/90networkmanagerhook.sh
	chmod +x /etc/rc.d/rc.networkmanager
	bash /etc/rc.d/rc.networkmanager restart
	/etc/rc.d/rc.inet2 restart
    else
	echo "Already configured."
    fi
    echo "DONE: Configuring  network manager"
fi
end_msg "DONE: $MSG"
   #+END_SRC

** Client ntp
   #+name:ntp_config
   #+begin_src sh 
# ntp server
if [ "$TARGET"=="CLIENT" ]; then
    MSG="Configuring ntp "
    start_msg $MSG
    if [ x"" == x"$(grep $SERVERIP /etc/ntp.conf)" ]; then
	bfile=/etc/ntp.conf
	backup_file $bfile
	cp -f $FDIR/CLIENT-ntp-client.conf $bfile
	chmod +x /etc/rc.d/rc.ntpd
	/etc/rc.d/rc.ntpd restart
	else
	    echo "    -> already configured"
    fi
    end_msg $MSG
fi

   #+end_src

** dnsmasq : dhcp, dns, masquerading
   #+name: dnsmasq_config
   #+BEGIN_SRC bash :exports code 
# dnsmasq
MSG="Configuring dnsmasq "
start_msg $MGS
if [ "$LINUX" == "SLACKWARE" ]; then
    TFILE="/etc/dnsmasq.conf"
    if [! -f $TFILE ]; then  
	copy_config "$FDIR/SERVER-etc-dnsmasq.conf" "$TFILE"
	TFILE="/etc/dnsmasq-hosts.conf"
	copy_config "$FDIR/SERVER-etc-dnsmasq-hosts.conf" "$TFILE"
	chmod +x /etc/rc.d/rc.dnsmasq 
	TFILE="/etc/hosts"
	copy_config "$FDIR/SERVER-etc-hosts" "$TFILE"
    else
	echo "Already configured. Restarting services ..."
    fi
    /etc/rc.d/rc.dnsmasq restart
fi
end_msg "DONE: $MSG"

   #+END_SRC

** firewall (NAT) : Arno iptables firewall.
   I will use arno iptables firewall because it has worked pretty well
   before . It must be installed before this step. If not installed , I
   will try to use sbopkg to install it.

   #+NAME: firewall_config
   #+BEGIN_SRC bash :exports code
# firewall
MSG="Configuring firewall "
start_msg $MSG
if [ "$LINUX" == "SLACKWARE" ]; then
    if [ ! hash arno-iptables-firewall 2>/dev/null ]; then
	#sbopkg -e stop -B -k -i arno-iptables-firewall
	source /root/.bashrc
	slpkg uograde
	slpkg -s sbo arno-iptables-firewall-2.0.1e-noarch-3_SBo
	ln -svf /etc/rc.d/rc.arno-iptables-firewall /etc/rc.d/rc.firewall
	copy_config "$FDIR/SERVER-firewall.conf" "/etc/arno-iptables-firewall/firewall.conf"
	chmod o-rwx /etc/arno-iptables-firewall/firewall.conf
	chmod +x /etc/rc.d/rc.firewall
    else
	echo "    -> firewall already installed and configured."
    fi
    /etc/rc.d/rc.firewall restart
fi
end_msg $MSG
# read
   #+END_SRC
** kanif cluster tools                                             :noexport:
   #+NAME: kanif_config
   #+BEGIN_SRC bash :exports code 
# kanif cluster tools
echo "Configuring kanif "
#ssh-keygen -t rsa
#for a in ssf6 ssf7 ssf8 ssf9; do
#    yes 'PASSWORD' | ssh-copy-id -i ~/.ssh/id_rsa.pub $q
#done
if [ "$LINUX" == "SLACKWARE" ]; then
    echo "Kanif assumed to be installed in slackware."
fi
copy_config "$FDIR/SERVER-etc-c3.conf" "/etc/kanif.conf"
#kash ls
echo "DONE: Configuring kanif "
# read

   #+END_SRC
** NFS
   #+NAME: nfs_config
   #+BEGIN_SRC bash :exports code 
# nfs
MSG="Configuring nfs "
start_msg $MSG
if [ "$TARGET" == "SERVER" ]; then
    if [x"" == x"$(grep 192.168 /etc/hosts.allow 2>/dev/null)" ]; then
	copy_config "$FDIR/SERVER-etc-hosts.allow" "/etc/hosts.allow"
    else
        echo "hosts allow already configured"
    fi
    if [x"" == x"$(grep 192.168.10.1 /etc/exports 2>/dev/null)" ]; then
	copy_config "$FDIR/SERVER-etc-exports" "/etc/exports"
    else
	echo "Exports already configured. Restarting services ..."
    fi
    chmod +x /etc/rc.d/rc.nfsd 
    /etc/rc.d/rc.nfsd restart
    /etc/rc.d/rc.inet2 restart
    echo "NOTE: If you have NFS problems, consider editing the /etc/hosts.allow and /etc/hosts.deny files"
else
    bfile="/etc/fstab"
    if [ x"" == x"$(grep ${SERVERIP} $bfile 2> /dev/null)" ]; then
	backup_file $bfile
	echo "# NEW NEW NEW NFS stuff " >> $bfile
	echo "${SERVERIP}:/home     /home   nfs     rw,hard,intr,usrquota  0   0" >> $bfile
    else
	echo "    -> already configured"
    fi
    mount -a 
fi
end_msg $MSG

   #+END_SRC
** NIS

   #+NAME: nis_config
   #+BEGIN_SRC bash :exports code
# nis
MSG="Configuring nis "
start_msg $MSG
if [ "$TARGET" == "SERVER" ]; then
    if [ x"" == x"$(grep salafisnis /etc/defaultdomain) 2>/dev/null " ] ; then 
	copy_config "$FDIR/SERVER-etc-defaultdomain" "/etc/defaultdomain"
    else
	echo "Already configured default nis domain"
    fi
    if [ x"" == x"$(grep salafisnis /etc/yp.conf) 2>/dev/null " ] ; then 
	copy_config "$FDIR/SERVER-etc-yp.conf" "/etc/yp.conf"
	copy_config "$FDIR/SERVER-var-yp-Makefile" "/var/yp/Makefile"
    else
	echo "Already configured yp"
    fi

    chmod +x /etc/rc.d/rc.yp
    backup_file /etc/rc.d/rc.yp
    if [ x"" == x"$(grep 'YP_SERVER_ENABLE=1' /etc/rc.d/rc.yp 2>/dev/null)"]; then 
	sed -i.bck 's/YP_CLIENT_ENABLE=.*/YP_CLIENT_ENABLE=0/ ; s/YP_SERVER_ENABLE=.*/YP_SERVER_ENABLE=1/ ;' /etc/rc.d/rc.yp
    else
	echo "Already configured as yp server"
    fi
    
    echo "Running nis services ..."
    ypserv
    make -BC /var/yp
    #/usr/lib64/yp/ypinit -m
else
    if [ x"" == x"$(grep ${NISDOMAIN} /etc/defaultdomain 2> /dev/null)" ]; then
	bfile="/etc/defaultdomain"
	backup_file $bfile
	echo ${NISDOMAIN} > $bfile  
	bfile="/etc/yp.conf"
	backup_file $bfile
	echo "ypserver ${SERVERIP}" > $bfile
	bfile=/etc/nsswitch.conf
	backup_file $bfile
	cp -f $FDIR/CLIENT-nsswitch.conf $bfile
	bfile="/etc/passwd"
	backup_file $bfile
	echo +:::::: >> $bfile
	bfile="/etc/shadow"
	backup_file $bfile
	echo +:::::::: >> $bfile
	bfile="/etc/group"
	backup_file $bfile
	echo +::: >> $bfile
	if [ x"" == x"$(grep 'YP_CLIENT_ENABLE=1' /etc/rc.d/rc.yp) 2>/dev/null" ]; then 
	    chmod +x /etc/rc.d/rc.yp
	    chmod +x /etc/rc.d/rc.nfsd
	    backup_file /etc/rc.d/rc.yp
	    sed -i.bck 's/YP_CLIENT_ENABLE=.*/YP_CLIENT_ENABLE=1/ ; s/YP_SERVER_ENABLE=.*/YP_SERVER_ENABLE=0/ ;' /etc/rc.d/rc.yp
	fi
    else
	echo "    -> already configured."
    fi
fi
/etc/rc.d/rc.yp restart    
/etc/rc.d/rc.nfsd restart
/etc/rc.d/rc.inet2 restart
rpcinfo -p localhost

end_msg $MSG

   #+END_SRC
** Client: Copy public id
   #+name:publicid_config
   #+begin_src sh 
if [ "$TARGET" == "CLIENT" ]; then 
    echo "Copying server public key  to configure passwordless access for root"
    mkdir -p /root/.ssh &>/dev/null
    if [ x"" == x"$(grep serversalafis /root/.ssh/authorized_keys 2>/dev/null)" ]; then
	cat $FDIR/CLIENT-server_id_rsa.pub >> /root/.ssh/authorized_keys
	chmod 700 /root/.ssh
	chmod 640 /root/.ssh/authorized_keys
    else
	echo "    -> already configured"
    fi
fi

   #+end_src
** Remove permissions to halt/shutdown from gui
   #+name:shutdown_config
   #+begin_src sh
MSG="Removing permissions to reboot/halt system"
start_msg $MSG
fname=disallow-power-options.rules
if [ ! -f /etc/polkit-1/rules.d/$fname ]; then
    chmod o-x /sbin/shutdown 
    chmod o-x /sbin/halt
    cp $FDIR/$fname /etc/polkit-1/rules.d/
else
    echo "Already configured"
fi

tfname=/etc/acpi/acpi_handler.sh
if [ x"" == x"$(grep emoves $tfname)" ]; then
    copy_config $FDIR/etc-acpi-acpi_handler.sh $tfname
else
    echo "Acpi handler already configured"
fi

end_msg $MSG

   #+end_src
** Crontab
   This crontab reads a given script and runs it every some time
   #+name:crontab_config
   #+begin_src sh :exports code 
MSG="Configuring crontab "
start_msg "$MSG"
if [ "$TARGET" == "SERVER" ]; then
    if [ x"" = x"$(crontab -l | grep network.sh 2>/dev/null)" ] ; then 
	crontab files/SERVER-crontab -u root
    else
	echo "Already configured"
    fi
else
    if [ x"" = x"$(crontab -l | grep check_status.sh 2>/dev/null)" ] ; then 
	crontab files/CLIENT-crontab -u root
    else
	echo "Already configured"
    fi
fi
end_msg "$MSG"

   #+end_src
** Write final script
   #+BEGIN_SRC bash :exports code :noweb yes :tangle bootstrap_slackware.sh 
#!/bin/bash

source util_functions.sh
source config.sh

<<proxy_config>>
<<slpkg_config>>
<<dhcpcd_config>>
<<nic_config>>
<<xinitrc_config>>
<<latam_keyboard>>
<<ntp_config>>
<<dnsmasq_config>>
<<firewall_config>>
<<nfs_config>>
<<nis_config>>
<<publicid_config>>
<<shutdown_config>>
<<crontab_config>>
   #+END_SRC

** TODO pssh?
   - https://unix.stackexchange.com/questions/128974/parallel-ssh-with-passphrase-protected-ssh-key
   - https://www.funtoo.org/Keychain
   - https://stackoverflow.com/questions/43597283/pass-the-password-as-an-argument-in-pssh
   - https://www.golinuxcloud.com/pssh-public-key-authentication-passwordless/

* Auxiliary scripts
** Create users from csv list with usernames and ids
   This script reads a list of usernames and passwords and creates the
   corresponding users
   #+begin_src sh :exports code :tangle create_users_from_list.sh
#!/bin/bash

FNAME=${1}
if [[ ! -f $FNAME ]]; then
    echo "Error: filename $FNAME does not exists"
    exit 1
fi

while read line
do
    username=$(echo $line | awk '{print $1}')
    password=$(echo $line | awk '{print $2}')
    echo username=$username
    echo password=$password
    # echo "Deleting account $username"
    # userdel $username
    echo Creating account $username
    useradd -d /home/$username -G audio,cdrom,floppy,plugdev,video -m -s /bin/bash $username 
    echo "Changing password for $username to ${password}"
    echo ${username}:${password} | chpasswd
    #echo "Recursive chown ... &"
    #chown -R $username.$username /home/$username &
done < $FNAME

read

echo "Updating nis database"
make -C /var/yp/
service portmap restart
service ypserv  restart
echo "DONE."

   #+end_src
** Recreate users from folders inside home 
   This is useful when the server was reinstalled
   #+begin_src sh :exports code :tangle recreate_users_from_directories.sh
#!/bin/bash

for usernamedir in /home/*; do 
    if [ -d $usernamedir ]; then
	username=$(basename $usernamedir)
	if [ "ftp" != "$username" ] && [ "localuser" != "$username" ] ; then 
	    #echo "Deleting account $username"
	    #userdel $username
	    echo Creating account $username
	    useradd -d /home/$username -G audio,cdrom,floppy,plugdev,video -m -s /bin/bash $username
	    echo "Changing password for $username to ${username}123"
	    echo ${username}:${username}123 | chpasswd 
	    echo "Recursive chown ... &"
	    chown -R $username.$username /home/$username & 
	fi
    fi
done
echo "Updating nis database"
make -C /var/yp/
service portmap restart
service ypserv  restart

echo "DONE."

   #+end_src
** Data dir for users
   In case there are some hard disk space to share between users,
   create directories for each one
   #+begin_src sh  :exports code :tangle create_data_dirs_for_users.sh
#!/bin/bash

for a in /home/*; do
    bname=$(basename $a)
    id -u $bname &> /dev/null
    status=$?
    #echo $bname
    #echo $status
    if [[ "0" -eq "$status" ]]; then
	for b in data01 data02; do
	    mkdir -p /mnt/local/$b/$bname	    
	    chown -R $bname.$bname /mnt/local/$b/$bname
	done
    fi
done
   #+end_src

* Problems and solutions [6/6]
** DONE Solving problems with xinit and xfce for all and new users
   CLOSED: [2019-10-16 Wed 10:25]
   - Make sure all users are on the video group. Maybe run
     #+BEGIN_SRC bash
     usermod -a -G audio,cdrom,floppy,plugdev,video,power,netdev,lp,scanner USERNAME
     #+END_SRC
     on each user.
   - Make sure all users have a .xinitrc (executable, readable and
     owned by the user)
     #+BEGIN_SRC 
     cp /etc/X11/xinit/xinitrc.xfce /etc/skel/.xinitrc
     chmod a+x /etc/skel/.xinitrc
     #+END_SRC
   - Make sure that the minimum gid in yp nis is 2 (see file
     =/var/yp/Makefile=)

** DONE Dhcpcd                                                    :SLACKWARE:
   CLOSED: [2019-10-16 Wed 10:25]
   The latest slackware version advertises the nic using a new
   identity called iuad or something but the dhcp server at unal does
   not read it so I needed to edit the /etc/dhcpcd.conf file and
   activate sending the hardware address
** DONE Advertising Ethernet speeds for eth1
   CLOSED: [2019-10-16 Wed 10:25]
   (SLackware does not have this problem)
  The connection from/to server through eth1 was at a maximum of
  10MB/s. while the interface supported gigabit. After many tests I
  found that by using the command
  #+begin_src shell
  ethtool -s eth1 advertise 0x010
  #+end_src
  I was able to advertise up to gigabit and then run at 100MB/s, which
  is the least acceptable given the router.

  To make this command permanent in debian, I had to add the following
  line under the config for ~eth1~ in the file
  ~/etc/network/interfaces~
  #+begin_src shell 
  post-up /sbin/ethtool -s eth1 advertise 0x010
  #+end_src
** DONE Installation  and setup of gdb numpy
   CLOSED: [2019-10-16 Wed 10:30]
  Anaconda creates a lot of problems. It is necessary to clean the path. The command I used was:
  #+begin_src shell
  kash ". ~/.bashrc; . /home/oquendo/PATH.sh; installpkg /home/oquendo/Downloads/pip-9.0.1-x86_64-1_SBo.tgz; pip install matplotlib numpy; cd /home/oquendo/Escritorio/HerrComp/05-Debugging/gdb_numpy-1.0/; python setup.py install"
  #+end_src
  
** DONE Armadillo problems with anaconda
   CLOSED: [2019-10-16 Wed 10:31]
  When installing armadillo, it finds the anaconda MKL and then a lot
  of problems arise when trying to run progrms with armadillo. This
  happens because putting anaconda bin on the path, in the first
  place, "overwrites" pkgconfig and many other system
  commands. Solution? eliminate anaconda from the path and then use
  alias or simething similar, like linking anaconda python, ipython,
  etc to /usr/local/bin, and no more.

** DONE Anaconda problems with qt
   CLOSED: [2019-10-16 Wed 10:31]
  If some error like "Cannot run ... QT ... xcb plugin ... " appears,
  maybe it needs to fix permissions. Run the following command:
  #+begin_src shell
  sudo chmod 755 /opt/anaconda2/bin/qt.conf
  #+end_src
** Formating usb (recovering the usb)
   Use gdisk
   #+begin_src sh
   gdisk
   enter recovery
   c
   e
   v
   w
   q
   #+end_src
   #+begin_src sh
   parted /dev/sdb
   mklabel GPT # accept destroying everything
   #+end_src
   Also you can use =cgdisk=.

   To completely delete the fs signatures
   #+begin_src 
   wipefs --all --force /dev/sdb
   #+end_src
* PACKAGES
  This section is used to configure packages that have been already
  installed using the scripts inside the
  [[file:~/repos/computer-labs/packages/]] folder.  Hopefully every
  package will be installed using slpkg.

  - SlackBuild builder: https://alien.slackbook.org/AST/index.php
  - https://blog.spiralofhope.com/15906/slackware-package-managers.html
  - https://blog.spiralofhope.com/22995/checkinstall.html
  - slacktrack:
    https://www.reddit.com/r/slackware/comments/36flus/practices_for_package_maintenance_for_slackware/
  - src2pkg: https://distro.ibiblio.org/amigolinux/download/src2pkg/
  - https://idlemoor.github.io/slackrepo/links.html

** Ganglia
   [[http://ganglia.info/][Ganglia]] is a system used to monitor clusters. I will start using it
   to check the status of the computer room. The isnstallation is
   different for server and client. I will put both here. 
*** Server installation and configuration
    I need to install =rrdtool=, =ganglia= with gmetad activated, and
    =ganglia-web=. I will use slackbuilds although I cannot use sbopkg
    or similar since it does not work with the proxy.
    #+BEGIN_SRC bash :exports code :tangle all-install-ganglia-full.sh
# This scripts install ganglia and its requirements (rrdtool) on a server.
source ~/.bashrc
mkdir /tmp/ganglia
cd /tmp/ganglia

# Install rrdtool
if ! hash rrdtool &>/dev/null; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing rrdtool ..."
    wget -nc -c  http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.7.0.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/libraries/rrdtool.tar.gz &&
	tar xf rrdtool.tar.gz &&
	cd rrdtool &&
	cp ../rrdtool-1.7.0.tar.gz ./ &&
	bash rrdtool.SlackBuild &&
	installpkg /tmp/rrdtool-1.7.0-x86_64-1_SBo.tgz &&
	echo "Done rrdtool. "
fi

# Install confuse
if [ ! -f /usr/lib64/libconfuse.la ]; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing confuse ..."
    wget -nc -c  https://github.com/martinh/libconfuse/releases/download/v3.2/confuse-3.2.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/libraries/confuse.tar.gz &&
	tar xf confuse.tar.gz &&
	cd confuse &&
	cp ../confuse-3.2.tar.gz ./ &&
	bash confuse.SlackBuild &&
	installpkg /tmp/confuse-3.2-x86_64-1_SBo.tgz &&
	echo "Done lib confuse. "
fi

# install ganglia activating gmetad
if ! hash ganglia-config &>/dev/null; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing ganglia/gmetad ..."
    wget -nc -c  http://downloads.sourceforge.net/ganglia/ganglia-3.7.2.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/network/ganglia.tar.gz &&
	tar xf ganglia.tar.gz &&
	cd ganglia &&
	cp ../ganglia-3.7.2.tar.gz ./ &&
	OPT=gmetad ./ganglia.SlackBuild &&
	installpkg /tmp/ganglia-3.7.2-x86_64-1_SBo.tgz &&
	echo "Done ganglia/gmetad. "
fi

# install ganglia-web
if [ ! -d /var/www/htdocs/ganglia/ ]; then 
    cd /tmp/ganglia
    echo "Downloading, compiling and installing ganglia-web ..."
    wget -nc -c  http://downloads.sourceforge.net/ganglia/ganglia-web-3.7.2.tar.gz &&
	wget -nc -c https://slackbuilds.org/slackbuilds/14.2/network/ganglia-web.tar.gz &&
	tar xf ganglia-web.tar.gz &&
	cd ganglia-web &&
	cp ../ganglia-web-3.7.2.tar.gz ./ &&
	./ganglia-web.SlackBuild &&
	installpkg /tmp/ganglia-web-3.7.2-x86_64-1_SBo.tgz &&
	echo "Done ganglia-web. "
fi
    #+END_SRC

    And this is the configuration file
    #+BEGIN_SRC bash :exports code :tangle server-config-ganglia-gmetad.sh
# configure
if [ ! -f /etc/gmetad.conf ]; then
    echo "Configuring ganglia monitor gmetad..."
    cat <<EOF > /etc/gmetad.conf
# /etc/gmetad.conf on serversalafis
data_source "clustersalafis" serversalafis
EOF
    echo "Done."
fi
    #+END_SRC
*** Client 
    The client can use the same server install script, but the
    configuration changes as follows
    #+BEGIN_SRC bash :exports code :tangle client-config-ganglia-gmond.sh
if [ ! -f /etc/gmond.conf ]; then 
    echo "Configuring gmond.conf ..."
    cat <<EOF > /etc/gmond.conf
#/etc/gmond.conf - on clustersalafis
cluster {
  name = "clustersalafis"
  owner = "unspecified"
  latlong = "unspecified"
  url = "unspecified"
}
 
udp_send_channel {
  mcast_join = 192.168.10.1
  port = 8649
  ttl = 1
}
EOF
fi
echo "Done"
    #+END_SRC

** CDO [2019-09-18 Wed]
   Use alien AST
** GRADS [2019-09-18 Wed]
   Use alien ATS
** PyQt5 (for tortoisehg) 2018
   https://slackbuilds.org/repository/14.2/libraries/PyQt5/
   #+begin_src sh
   wget http://downloads.sourceforge.net/pyqt/PyQt5_gpl-5.7.tar.gz
   wget https://slackbuilds.org/slackbuilds/14.2/libraries/PyQt5.tar.gz
   tar xvf PyQt5.tar.gz
   cd PyQt5
   ln -s ../PyQt5_gpl-5.7.tar.gz ./
   bash PyQt5.SlackBuild.sh
   #+end_src
** mercurial 2018
   #+begin_src sh
   kash "source /root/.bashrc; conda install -y -c conda-forge mercurial"
   #+end_src
** Tortoisehg 2018
   Download the source code and use src2pkg and install the package
** kdiff3 2018
   Use slackbuilds.org

* TIPS
** For slackware packages, use slpkg 
** sbopkg behing firewall blocking rsync
   From : https://www.linuxquestions.org/questions/slackware-14/sbopkg-problem-774301/
   1. Download & install TOR from www.torproject.org
   2. Install polipo & torsocks
   3. Run "sudo torsocks sbopkg -r"
   4. Done, repository synced!
