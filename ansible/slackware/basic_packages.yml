# ansible-playbook -e 'all=localhost' ansible/slackware/basic_packages.yml 
---
- name: Basic system packages tools for slackware
  hosts: "{{ all | default('clients') }}"
  gather_facts: false
  vars:
    network_available: true
  tasks:
  - name: Configuring slackpkg official package manager
    block:
      - name: Configuring slackpkg options
        replace:
          dest: /etc/slackpkg/slackpkg.conf
          regexp: '^{{item.key}}'
          replace: '{{item.value}}'
          backup: yes
        loop:
          - { key: "DIALOG=on", value: "DIALOG=off" }
          - { key: "BATCH=off", value: "BATCH=on" }
          - { key: "DEFAULT_ANSWER=n", value: "DEFAULT_ANSWER=y" }
          - { key: "WGETFLAGS=.*", value: "WGETFLAGS=--passive-ftp" }
        register: slackpkgconf

      - name: Configure slackpkg mirrors
        lineinfile:
          dest: /etc/slackpkg/mirrors
          regexp: '^{{item}}'
          line: '{{item}}'
        loop:
          - http://mirrors.slackware.com/slackware/slackware64-current/
        register: mirrors

      - name: Configuring slackpkg blacklist
        lineinfile:
          path: /etc/slackpkg/blacklist
          regexp: '^{{item}}'
          line: '{{item}}'
          backup: yes
        loop:
          - 'kernel-generic.*'
          - 'kernel-huge.*'
          - 'kernel-modules.*'
          - 'kernel-source.*'
          - 'kernel-headers.*'
          - '[0-9]+_SBo'
          - '[0-9]+alien'
        register: blacklist

      - name: Updating slackpkg if needed
        shell:
          cmd: '{{item}}'
        loop:
          - 'source $HOME/.bashrc; echo YES | slackpkg -batch=on -default_answer=y update gpg'
          - 'source $HOME/.bashrc; slackpkg -batch=on -default_answer=y update'
        when:
          mirrors.changed or blacklist.changed or slackpkgconf.changed

  - name: Configuring slpkg
    tags: slpkg
    block:
      - name: Checking if slpkg is installed
        stat:
          path: /usr/sbin/slpkg
        register: slpkg

      # - name: Debug
      #   debug:
      #     msg: '{{slpkg}}'

      # If not installed or not found, installed, put all in another block
      - name: Installing tomlkit and pythondialog if needed
        ansible.builtin.pip:
          name: '{{ item }}'
          state: present
        loop:
          - tomlkit
          - pythondialog
        when:
          slpkg.stat.exists == False

      - name: Downloading the executable for slpkg 
        get_url:
          url: https://downloads.sourceforge.net/project/slpkg/binary/slpkg-5.1.5-x86_64-1_dsw.txz
          dest: /tmp/slpkg-5.1.5-x86_64-1_dsw.txz
        when:
          slpkg.stat.exists == False
        register: slpkgdownload

      - name: Installing slpkg witn installpkg
        shell:
          cmd: 'upgradepkg --install-new /tmp/slpkg-5.1.5-x86_64-1_dsw.txz'
        when:
          slpkg.stat.exists == False 
        register: slpkginstalled

      - name: Configuring slpkg to avoid dialog 
        replace:
          path: /etc/slpkg/slpkg.toml
          backup: yes
          regexp: 'DIALOG = true'
          replace: 'DIALOG = false'
        register: slpkgdialog

      - name: Configuring slpkg to delete sources, this helps wth retry downloading corrupt files 
        replace:
          path: /etc/slpkg/slpkg.toml
          backup: yes
          regexp: 'DELETE_SOURCES = false'
          replace: 'DELETE_SOURCES = true'
        register: slpkgdeletesources

      - name: Configuring slpkg repos
        replace:
          path: /etc/slpkg/repositories.toml
          backup: yes
          regexp: '(\[{{ item }}\]\nENABLE =) false'
          replace: '\1 true'
        loop:
          - SLACK
          - SLACK_EXTRA
          - SLACK_PATCHES
          - ALIEN
        register: slpkgrepos
        
      - name: Deactivate SBO repo in slpkg
        replace:
          path: /etc/slpkg/repositories.toml
          backup: yes
          regexp: '(\[{{ item }}\]\nENABLE =) true'
          replace: '\1 false'
        loop:
          - SBO

      - name: Make slack the default repo
        ansible.builtin.replace:
          path: /etc/slpkg/repositories.toml
          regexp: '^REPOSITORY = .*'
          replace: 'REPOSITORY = "slack"'
          backup: yes

      - name: Replace all 15.0 with current
        ansible.builtin.replace:
          path: /etc/slpkg/repositories.toml
          regexp: '15\.0'
          replace: 'current'
          backup: yes
        register: slpkgrepos

      - name: Configuring slpkg blacklist
        replace:
          path: /etc/slpkg/blacklist.toml
          regexp: '^PACKAGES.*'
          replace: 'PACKAGES = ["kernel-*"]'
          backup: yes
        register: slpkgblacklist

      - name: Updating slpkg if needed
        shell:
          cmd: 'source $HOME/.bashrc; slpkg update'
        when :
          slpkgrepos.changed or slpkgblacklist.changed 


  - name: Configuring sbopkg
    block:
      - name: Checking if sbopkg is installed
        stat:
          path: /usr/sbin/sbopkg
        register: sbopkg

      - name: Installing sbopkg if not installed
        shell:
          cmd: 'wget https://github.com/sbopkg/sbopkg/releases/download/0.38.2/sbopkg-0.38.2-noarch-1_wsr.tgz; upgradepkg --install-new  sbopkg-0.38.2-noarch-1_wsr.tgz'
        when:
          sbopkg.stat.exists == False
        register: sbopkginstalled

      - name: Configuring sbopkg for slackware current
        replace:
          dest: /etc/sbopkg/sbopkg.conf
          regexp: '{{item.key}}'
          replace: '{{item.value}}'
          backup: yes
        loop:
          - {key: "REPO_BRANCH:-15.0", value: "REPO_BRANCH:-current"}
          - {key: "REPO_NAME:-SBo}", value: "REPO_NAME:-SBo-git}"}
        register: sbopkgcurrent

      - name: Creating needed directories
        file:
          path: '{{item}}'
          state: directory
        loop:
          - /var/lib/sbopkg/SBo/14.2
          - /var/lib/sbopkg/SBo/15.0
          - /var/log/sbopkg
          - /var/lib/sbopkg/queues
          - /var/cache/sbopkg
          - /tmp/SBo
        register: sbopkgdirs  

      - name: Updating sbopkg if needed
        shell:
          cmd: 'source $HOME/.bashrc; sbopkg -r -V SBo-git/current'
        when:
          sbopkg.stat.exists == False or sbopkginstalled.changed or sbopkgcurrent.changed or sbopkgdirs.changed


  - name: Installing basic packages with sbopkg
    block:
      - name: Check if package log exists per package at /var/log/packages/
        find:
          paths: /var/log/packages
          patterns: "{{ item }}*"
          file_type: file
        loop:
          - autossh
          - xfce4-xkb-plugin
          - slim
          - fail2ban
          - wol
          - modules
          - iotop
          - vscode-bin
          - google-chrome-the-latest
          - rclone
          - sshpass
          - sshguard
          - tmate
          - etckeeper
          - nnn
          - xdm-slackware-theme
        register: package_logs

      - name: Install basic packages, directly (no queues)
        shell:
          cmd: 'source $HOME/.bashrc; MAKEFLAGS=-j$(nproc) sbopkg -B -k -i {{ item.item }} | tee /tmp/sbo_basic.log'
        loop: "{{ package_logs.results }}"
        loop_control:
          label: "{{ item.item }}"
        when: item.matched == 0
        register: basicpackages

      - name: Checking if google chrome is installed
        stat:
          path: /usr/bin/google-chrome-stable
        register: googlechrome

      - name: Running chrome install command if not installed (from the google-chrome-the-latest package)
        shell:
          cmd: '/opt/google-chrome-the-latest/google-chrome-the-latest.py install silent'
        when:
          googlechrome.stat.exists == False

      - name: Installing x2goserver
        tags: x2goserver
        block:
          - name: Checking if alreay installed by check /usr/sbin/x2gocleansessions
            stat:
              path: /usr/sbin/x2gocleansessions
            register: x2goserver

          - name: Installing x2goserver if needed
            shell: |
              source $HOME/.bashrc; 
              sqg -p x2goserver; 
              printf "Q\nP\n" | MAKEFLAGS=-j$(nproc) sbopkg -B -i x2goserver
            when:
              x2goserver.stat.exists == False
            register: x2goserverinstalled
          
          - name: Fixing x2goserver by running the shell command
            shell: |
              removepkg /var/log/packages/perl-DBD-SQLite-*
              echo "P" | MAKEFLAGS=-j$(nproc) sbopkg -i perl-DBD-SQLite #installs version 1.72 as of 2023-01-31
              x2godbadmin --createdb
              /etc/rc.d/rc.x2goserver restart
            when:
              x2goserver.stat.exists == False or x2goserverinstalled.changed
            register: x2goserverfixed

      - name: Installing latest monit version (sbo version is old)
        tags: monit
        block:
          - name: Checking if monit is installed
            stat: 
              path: /usr/bin/monit
            register: monit

          - name: Getting monit version
            ansible.builtin.command: monit -V
            changed_when: false
            when: monit.stat.exists
            register: monitversion
            
          - name: Download monit from official site and move to /var/lib/sbopkg/SBo-git/system/monit
            get_url:
              url: https://mmonit.com/monit/dist/monit-5.34.2.tar.gz
              dest: /var/cache/sbopkg/monit-5.34.2.tar.gz
            when:
              monit.stat.exists == False or monitversion.stdout.find('5.34.2') == -1
            register: monitdownload

          - name: Creating symlink to /var/lib/sbopkg/SBo-git/system/monit
            file:
              src: /var/cache/sbopkg/monit-5.34.2.tar.gz
              dest: /var/lib/sbopkg/SBo-git/system/monit/monit-5.34.2.tar.gz
              state: link
            when:
              monit.stat.exists == False or monitversion.stdout.find('5.34.2') == -1
            register: monitlink 

          - name: Installing the right version 5.34.2
            shell: |
              source $HOME/.bashrc; 
              cd /var/lib/sbopkg/SBo-git/system/monit/; 
              sed -i.bck 's/README//' monit.SlackBuild
              MAKEFLAGS=-j$(nproc) VERSION=5.34.2 bash monit.SlackBuild
              upgradepkg --install-new /tmp/monit-5.34.2-x86_64-1_SBo.tgz
            when:
              monit.stat.exists == False or monitversion.stdout.find('5.34.2') == -1
            register: monitinstalled

  - name: Installing some pip packages
    pip:
      name: '{{ item }}'
      executable: pip3
    loop:
      - ansible
      - ansible-lint
      - clustershell
    register: pippackages
