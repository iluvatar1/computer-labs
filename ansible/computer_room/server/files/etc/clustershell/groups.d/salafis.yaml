# ClusterShell groups config cluster.yaml.example
#
# Example of YAML groups config file with multiple sources.
# ^^^^^^^
# Here you can describe your cluster nodes and equipments using several
# group sources.
#
# Example of group source use-cases are:
# - functional info (compute, storage, service nodes, etc.)
# - location (room, rack position, etc.)
# - physical attributes (cpu type, gpu types, memory size, etc.)
# - vendors and hardware models, useful info for firmware update
# - infrastructure (pdu, network and interco switches)
# - ownership of nodes and partitions...
#
# File will be auto-loaded if renamed to .yaml
#
# Break and adapt to fit your own needs. Use nodeset CLI to test config.

# Group source roles:
# define groups @roles:adm, @roles:io, etc.
roles:
    adm: '192.168.10.1:443'
    2thr: '192.168.10.[28,29]'
    4thr: '192.168.10.[19-27]'
    6thr: '192.168.10.[16-18]'    
    8thr: '192.168.10.[7-15]'
    12thr: '192.168.10.[3-6]'
    16thr: '192.168.10.[2]'
    nodes: '@2thr,@4thr,@6thr,@8thr,@12thr,@16thr'
    efi: '192.168.10.[2-6,16-18]'
    bios: '192.168.10.[7-15,19-29]'
    TEST: '192.168.10.[2-100]'
    all: '@adm,@nodes'

    # adm: 'example0'
    # io: '@racks:rack2,example2'
    # compute: '@racks:rack[3-4]'
    # gpu: '@racks:rack4'
    # # the 'all' special group is only needed if we don't want all nodes from
    # # this group source included, here we don't want example0 for clush -a
    # all: '@io,@compute'

# # Group source racks:
# # define groups @racks:rack[1-4], @racks:old and @racks:new
# racks:
#     rack1: 'example[0,2]'
#     rack2: 'example[4-5]'
#     rack3: 'example[32-159]'
#     rack4: 'example[156-159]'
#     # groups from same source may be referenced without the "source:" prefix
#     # and yes, ranges work for groups too!
#     old: '@rack[1,3]'
#     new: '@rack[2,4]'
