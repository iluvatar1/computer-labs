This repository contains several scripts to build different kind of
tools that I have needed along time. The following describes the
structure and usage.
* =clonezilla=
   This shows how to clone a device into an image or how to clone and
   image to many computers. Maybe this could be scripted, I do not
   know how. It would be useful if the computers could be configured
   to boot from pxe by default and somehow clonezilla determines if
   the system needs to be reimaged.

   Working versions: 
   - clonezilla-live-2.6.4-10-amd64.iso
   - drbl-live-xfce-2.6.2-1-amd64.iso

* =computer-room=[0/1]
   This shows several scripts that can be used to configure either a
   client or a server for a computer room. 
   It is assumed that the system running this scripts is already in
   basic configured state (internet, etc).
   The services configured are
   |---------------------------------------+--------+--------|
   | service                               | client | server |
   |---------------------------------------+--------+--------|
   | fixed network ip interfaces           |        | X      |
   | dnsmasq                               |        | X      |
   | firewall                              |        | X      |
   | kanif                                 |        | X      |
   | nfs                                   | X      | X      |
   | nis                                   | X      | X      |
   | Network manager hook                  | X      |        |
   | ntp                                   | X      |        |
   | root internet access                  | X      | X      |
   | default session: xfce                 | X      |        |
   | latam keyboard                        | X      |        |
   | cronjob to check connection status    | X      |        |
   | Server public key for ssh access      | X      |        |
   | Remove permissions to halt / shutdown | X      |        |
   |---------------------------------------+--------+--------|

*** TODO Configure cronjobs for server [0/4]
    - [ ] kill_high_cpu
    - [ ] network.sh
    - [ ] sshserver.sh
    - [ ] wol.sh : needs mac list
* =configurations=
   This configures a clean install to give it a minimal working
   state. In principle, to configure slackware, you should run the
   following scripts:
   #+BEGIN_SRC sh
   bash config_slackware.sh
   bash base_packages_slackware.sh
   bash update_slackware.sh
   #+END_SRC
   I am still fixing the last one since somehow it is killing
   coreutils and I endup with a bricked system with no coreutils ... 
** Lubuntu [9/11]
   - [X] Configure/install google remote desktop:
     https://support.google.com/chrome/answer/1649523?co=GENIE.Platform%3DDesktop&hl=en 
   - [X] Configure zerotier one : 
     - Install curl : sudo apt install curl
     - https://www.zerotier.com/download.shtml
     - Authorize the new computer
   - [X] Install syncthing:
     - https://apt.syncthing.net/
   - [ ] Install dropbox
     - https://www.dropbox.com/install-linux
   - [X] Inkscape : sudo apt install inkscape
   - [X] Libreoffice : sudo apt install libreoffice
   - [X] Texlive : sudo apt install texlive-full
   - [X] keepassxc : sudo apt install keepassxc
   - [X] obsproject : sudo apt install obsproject
   - [X] Openssh : sudo apt install openssh-server, configure port 443
   - [ ] emacs: sudo apt install emacs


* Onedrive, Google drive, etc in Linux 
** Slackware
*** One drive
    - Check : https://www.linuxuprising.com/2018/07/how-to-mount-onedrive-in-linux-using.html
    - Mount command : rclone  --vfs-cache-mode writes mount remote-onedrive: ~/OneDrive/ --daemon 
*** Google Drive
    - Check :
      http://thiagopirola.blogspot.com/2016/07/google-drive-in-slackware-14x.html
    - Mount command : rclone  --vfs-cache-mode writes mount
      remote-googledrive: ~/Google\ Drive/ --daemon 
      
* =liveslak=
   This allows to create a custom =liveslak= image. This scripts are
   assumed to run on a slackware 14.2 box (to use updated tools, but
   the live usb is based on an already downloaded liveslack).

   Description:
   - =make_extra_modules.sh= :: creates extramodules like
        =miniconda3=, =valgrind=, =paraview=, =openmpi= .  
   - =create_custom_liveslack_iso.sh= :: This creates the actual
        liveslack iso using the custom modules. 

   Please read the file =live-distro.org= .  
* =packages= [0/2] 
   Allows to install several packages defined inside each
   script. Specific cases, like anaconda or firefox, are handled with
   their own scripts. Please put here any package you want to
   install. 
** TODO Check installation of heaptrack
  [[https://github.com/KDE/heaptrack]]
  
** TODO Check slackroll
   https://rg3.github.io/slackroll/
* =vagrant-machines=
   Here are several examples to create either a basebox and some
   vagrantfiles .  

* packer
  Here I put some scripts to automate slackware installation. Strongly
  inspired on https://github.com/akosiaris/packer-slackware/ , adapted
  for slackware current. 
* TOCHECK 
  - https://github.com/bifferos/explodeinstaller
  - https://github.com/akosiaris/packer-slackware/blob/master/slackware64-14.2.json
  - https://github.com/Cyclenerd/postinstall/blob/master/postinstall.sh
